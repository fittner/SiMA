/**
 * E41_Libidostasis.java: DecisionUnits - pa.modules._v38
 * 
 * @author deutsch
 * 03.03.2011, 15:18:57
 */
package pa._v38.modules;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.SortedMap;
import pa._v38.interfaces.itfInspectorGenericTimeChart;
import pa._v38.interfaces.modules.I3_1_receive;
import pa._v38.interfaces.modules.I3_1_send;
import pa._v38.interfaces.modules.I2_1_receive;
import pa._v38.interfaces.modules.eInterfaces;
import pa._v38.memorymgmt.datahandler.clsDataStructureGenerator;
import pa._v38.memorymgmt.datatypes.clsDriveMesh;
import pa._v38.memorymgmt.datatypes.clsThingPresentationMesh;
import pa._v38.memorymgmt.enums.eContentType;
import pa._v38.storage.DT1_LibidoBuffer;
import pa._v38.tools.clsPair;
import pa._v38.tools.clsTriple;
import pa._v38.tools.toText;
import config.clsProperties;
import du.enums.pa.eDriveComponent;
import du.enums.pa.ePartialDrive;

/**
 * The constant flow of libido/psychic energy provided by the neurosymbols originating from {F40} 
 * has to be buffered until the tension generated by the seeking system can be released. Module 
 * {F41} adds the incoming libido to a libido buffer. The total amount of buffered libido is 
 * forwarded as total amount of tension. Further, the sexual drives are split into aggressive 
 * and libidinous components.
 * 
 * @author muchitsch
 * 07.05.2012, 15:18:57
 * 
 */
public class F41_Libidostasis extends clsModuleBase implements I2_1_receive, I3_1_send, itfInspectorGenericTimeChart {
	public static final String P_MODULENUMBER = "41";
	
	private DT1_LibidoBuffer moLibidoBuffer;
	private double mrIncomingLibido;
	private double mrTotalLibido;
	private static final double mrLibitoStartingOffset = 0.2;
	
	//holds the sexual drives A-> agr / B-> lib parts
	private ArrayList <clsPair<clsDriveMesh,clsDriveMesh>> moSexualDriveCandidates_OUT;
	private double Personality_Content_Factor = 0; //neg = shove it to agressive, pos value = shove it to libidoneus, value is in percent (0.1 = +10%)
	
	/**
	 * basic constructor, sets Libido to 0
	 * 
	 * @author muchitsch
	 * 03.03.2011, 15:47:47
	 *
	 * @param poPrefix
	 * @param poProp
	 * @param poModuleList
	 * @throws Exception 
	 */
	public F41_Libidostasis(String poPrefix, clsProperties poProp,
			HashMap<Integer, clsModuleBase> poModuleList, SortedMap<eInterfaces, ArrayList<Object>> poInterfaceData, 
			DT1_LibidoBuffer poLibidoBuffer) throws Exception {
		super(poPrefix, poProp, poModuleList, poInterfaceData);
		
		moLibidoBuffer = poLibidoBuffer;
		mrIncomingLibido = 0;
		mrTotalLibido = mrLibitoStartingOffset;
		
		applyProperties(poPrefix, poProp);	
	}
	
		
	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 14.04.2011, 17:36:19
	 * 
	 * @see pa.modules._v38.clsModuleBase#stateToTEXT()
	 */
	@Override
	public String stateToTEXT() {
		String text ="";
		
		text += toText.valueToTEXT("moLibidoBuffer", moLibidoBuffer);
		text += toText.valueToTEXT("mrIncomingLibido", mrIncomingLibido);		
		text += toText.valueToTEXT("mrTotalLibido", mrTotalLibido);
		
		return text;
	}		
	
	public static clsProperties getDefaultProperties(String poPrefix) {
		String pre = clsProperties.addDot(poPrefix);
		
		clsProperties oProp = new clsProperties();
		oProp.setProperty(pre+P_PROCESS_IMPLEMENTATION_STAGE, eImplementationStage.BASIC.toString());
				
		return oProp;
	}
	
	private void applyProperties(String poPrefix, clsProperties poProp) {
		//nothing to do
	}	
	
	@Override
	protected void setProcessType() {mnProcessType = eProcessType.PRIMARY;}
	@Override
	protected void setPsychicInstances() {mnPsychicInstances = ePsychicInstances.ID;}
	@Override
	protected void setModuleNumber() {mnModuleNumber = Integer.parseInt(P_MODULENUMBER);}

	private void updateTempLibido() {
		//send the libido amount
		moLibidoBuffer.receive_D1_1(mrIncomingLibido);
		//return the total value
		mrTotalLibido = moLibidoBuffer.send_D1_2();
	}
	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 03.03.2011, 15:19:22
	 * 
	 * @see pa.modules._v38.clsModuleBase#process_basic()
	 */
	@Override
	protected void process_basic() {
		
		moSexualDriveCandidates_OUT = new ArrayList<clsPair<clsDriveMesh,clsDriveMesh>>();
		//TODO nach neuen Erkenntnissen Libido-Feedback ausbessern, siehe WS-Protokolle
		updateTempLibido();
		
		clsPair<clsDriveMesh, clsDriveMesh> oTempPair = null;
		clsDriveMesh agressiveDM = null;
		clsDriveMesh libidoneusDM = null;
		double rAgrTension = 0;
		double rLibTension = 0;
		
		//calculate the tension for both parts from personality split 50/50
		rAgrTension = this.mrTotalLibido /2;
		rLibTension = this.mrTotalLibido /2;
		
		//change the agressive/lib content due to personality
		if(Personality_Content_Factor != 0){
			//oEntry = changeContentByFactor(oEntry);
		}
		
		//1 - create agressive component DM
		agressiveDM = (clsDriveMesh)clsDataStructureGenerator.generateDM(new clsTriple<eContentType, ArrayList<clsThingPresentationMesh>, Object>(eContentType.DRIVECANDIDATE, new ArrayList<clsThingPresentationMesh>(), "") 
				,eDriveComponent.AGGRESSIVE, ePartialDrive.UNDEFINED );
		agressiveDM.setQuotaOfAffect(rAgrTension);
		
		//2- create libidoneus component DM
		libidoneusDM = (clsDriveMesh)clsDataStructureGenerator.generateDM(new clsTriple<eContentType, ArrayList<clsThingPresentationMesh>, Object>(eContentType.DRIVECANDIDATE, new ArrayList<clsThingPresentationMesh>(), "") 
				,eDriveComponent.LIBIDINOUS, ePartialDrive.UNDEFINED );
		libidoneusDM.setQuotaOfAffect(rLibTension);
		
		//add the components to the new list as PAIR(Agr,Lib)
		oTempPair = new clsPair<clsDriveMesh, clsDriveMesh>(agressiveDM, libidoneusDM); 
		moSexualDriveCandidates_OUT.add(oTempPair);
		
	}
	
	
	
	

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 03.03.2011, 15:19:22
	 * 
	 * @see pa.modules._v38.clsModuleBase#process_draft()
	 */
	@Override
	protected void process_draft() {
		 updateTempLibido();
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 03.03.2011, 15:19:22
	 * 
	 * @see pa.modules._v38.clsModuleBase#process_final()
	 */
	@Override
	protected void process_final() {
		 updateTempLibido();
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 03.03.2011, 15:19:22
	 * 
	 * @see pa.modules._v38.clsModuleBase#send()
	 */
	@Override
	protected void send() {
		send_I3_1(moSexualDriveCandidates_OUT);
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 03.03.2011, 15:49:01
	 * 
	 * @see pa.interfaces.send._v38.I1_10_send#receive_I1_10(java.util.HashMap)
	 */
	@Override
	public void send_I3_1(ArrayList< clsPair<clsDriveMesh, clsDriveMesh> > poSexualDriveComponents) {
		((I3_1_receive)moModuleList.get(43)).receive_I3_1(poSexualDriveComponents);
		putInterfaceData(I3_1_send.class, poSexualDriveComponents);
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 03.03.2011, 15:49:01
	 * 
	 * @see pa.interfaces.receive._v38.I1_9_receive#receive_I1_9(java.util.HashMap)
	 */
	@Override
	public void receive_I2_1(Double poLibidoSymbol) {
		mrIncomingLibido= poLibidoSymbol;
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 15.04.2011, 13:52:57
	 * 
	 * @see pa.modules._v38.clsModuleBase#setDescription()
	 */
	@Override
	public void setDescription() {
		moDescription = "The constant flow of libido/psychic energy provided by the neurosymbols originating from {E40} has to be buffered until the tension generated by the seeking system can be released. Module {E41} adds the incoming libido to a libido buffer. The total amount of buffered libido is forwarded as total amount of tension. Further, the sexual drives are split into aggressive and libidinous components.";
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 15.04.2011, 20:16:46
	 * 
	 * @see pa.interfaces._v38.itfTimeChartInformationContainer#getTimeChartData()
	 */
	@Override
	public ArrayList<Double> getTimeChartData() {
		ArrayList<Double> oValues = new ArrayList<Double>();
		
		oValues.add(mrIncomingLibido);
		oValues.add(mrTotalLibido);
		
		return oValues;
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 15.04.2011, 20:16:46
	 * 
	 * @see pa.interfaces._v38.itfTimeChartInformationContainer#getTimeChartCaptions()
	 */
	@Override
	public ArrayList<String> getTimeChartCaptions() {
		ArrayList<String> oCaptions = new ArrayList<String>();
		oCaptions.add("Incoming Libido");
		oCaptions.add("Total Libido");
		return oCaptions;
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 19.04.2011, 10:42:50
	 * 
	 * @see pa.interfaces._v38.itfInspectorGenericTimeChart#getTimeChartAxis()
	 */
	@Override
	public String getTimeChartAxis() {
		return "Libido";
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 19.04.2011, 10:42:50
	 * 
	 * @see pa.interfaces._v38.itfInspectorGenericTimeChart#getTimeChartTitle()
	 */
	@Override
	public String getTimeChartTitle() {
		return "Libido Chart";
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 19.04.2011, 10:42:50
	 * 
	 * @see pa.interfaces._v38.itfInspectorGenericTimeChart#getTimeChartUpperLimit()
	 */
	@Override
	public double getTimeChartUpperLimit() {
		return 1.05;
	}

	/* (non-Javadoc)
	 *
	 * @author deutsch
	 * 19.04.2011, 10:42:50
	 * 
	 * @see pa.interfaces._v38.itfInspectorGenericTimeChart#getTimeChartLowerLimit()
	 */
	@Override
	public double getTimeChartLowerLimit() {
		return -0.05;
	}	
}
